#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace CLI 
{    
    function opt(string $name): mixed
    {
        static $options;

        if (! isset($options)) {
            $options = \getopt('i:v');
        }

        return $options[$name] ?? null;
    }

    function isCli(): bool
    {
        return 'cli' === \PHP_SAPI;
    }

    function verbose(): bool
    {
        return null !== opt('v');
    }
}

namespace Converter
{
    const VIDEO_EXT_MKV = 'mkv';
    const AVAILABLE_VIDEO_EXT = ['mkv', 'avi'];
    const AVAILABLE_SUB_EXT = ['ass', 'srt'];
    const AVAILABLE_AUDIO_EXT = ['mp3'];

    function addSub(string $source, string $dest): array
    {
        $audio = null;
        $sub = null;
        $extPost = \strrpos($source, '.');
        $sourceName = \substr($source, 0, $extPost);
        $sourceExt = \substr($source, $extPost);

        foreach (AVAILABLE_SUB_EXT as $ext) {
            if (\is_file(\sprintf('%s.%s', $sourceName, $ext))) {
                $sub = \sprintf('%s.%s', $sourceName, $ext);

                break;
            }
        }

        foreach (AVAILABLE_AUDIO_EXT as $ext) {
            if (\is_file(\sprintf('%s.%s', $sourceName, $ext))) {
                $audio = \sprintf('%s.%s', $sourceName, $ext);

                break;
            }
        }

        if (null === $sub) {
            throw new \InvalidArgumentException(\sprintf('Video file "%s" does not contain subtitle file.', $source));
        }

        $output = null;
        $retval = null;

        if (VIDEO_EXT_MKV !== $sourceExt) {
            $convertedSource = \preg_replace('#(.*)\.(\w+)$#', \sprintf('$1.%s', VIDEO_EXT_MKV), $source);
            $retval = null;

            \exec(\sprintf('ffmpeg -fflags +genpts -i "%s" -c copy "%s"', $source, $convertedSource), result_code: $retval);

            if ($retval > 0) {
                throw new \RuntimeException(\sprintf('Can not convert "%s" to "%s"', $source, $convertedSource));
            }

            $source = $convertedSource;
            $dest = \preg_replace('#(.*)\.(\w+)$#', \sprintf('$1.%s', VIDEO_EXT_MKV), $dest);
        }

        if (null !== $audio) {
            $convertedSource = \preg_replace('#(.*)\.(\w+)$#', '$1_[audio]_.$2', $source);
            $retval = null;

            \exec(\sprintf('ffmpeg -i "%s" -i "%s" -c copy -map 0:0 -map 1:0 "%s"', $source, $audio, $convertedSource), result_code: $retval);

            if ($retval > 0) {
                throw new \RuntimeException(\sprintf('Can not add audio file "%s" to "%s"', $audio, $source));
            }

            \rename($convertedSource, $source);
        }

        \exec(\sprintf('ffmpeg -i "%s" -i "%s" -c copy "%s" -loglevel 24', $source, $sub, $dest), $output, $retval);

        return [$retval, $output];
    }

    function isSupportedFormat(string $video): bool
    {
        return 1 === \preg_match(\sprintf('#\.(?:%s)$#', \implode('|', AVAILABLE_VIDEO_EXT)), $video);
    }
}

namespace Main
{
    use CLI;
    use Converter;

    use const \DIRECTORY_SEPARATOR as DS;

    \set_time_limit(0);

    if (! Cli\isCli()) {
        throw new \RuntimeException('Only CLI calls.');
    }

    $sourceDir = \rtrim(Cli\opt('i'), DS);
    $destDir = \sprintf('%s%soutput%s', $sourceDir, DS, DS);

    if (! \is_readable($sourceDir)) {
        throw new \RuntimeException(\sprintf('Can not read "%s".', $sourceDir));
    }

    if (! \is_dir($destDir) && ! \mkdir($destDir, recursive: true)) {
        throw new \RuntimeException(\sprintf('Can not create output directory "%s".', $destDir));
    }

    if (! \is_writable($destDir)) {
        throw new \RuntimeException(\sprintf('Can not write to "%s".', $destDir));
    }

    foreach (\glob(\sprintf('%s%s*', $sourceDir, DS)) as $filename) {
        if (Converter\isSupportedFormat($filename)) {
            if (CLI\verbose()) {
                echo \sprintf("\033[33mFormatting \"%s\"\033[0m", $filename), \PHP_EOL;
            }

            try {
                [$retval, $output] = Converter\addSub($filename, \sprintf('%s%s%s', $destDir, DS, \basename($filename)));

                if ($retval > 0) {
                    echo \implode(\PHP_EOL, $output);
                }

                if (CLI\verbose() && 0 === $retval) {
                    echo "\033[32mFormatting processed\033[0m", \PHP_EOL;
                }
            } catch (\InvalidArgumentException|\RuntimeException $e) {
                echo \sprintf("\033[31mFormatting error: %s\033[0m", $e->getMessage()), \PHP_EOL;
            }
        }
    }
}

